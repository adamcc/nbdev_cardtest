[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck of cards",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nInitialize self. See help(type(self)) for accurate signature.\nWhen we create a deck, all of the cards should be present\n\ndeck = Deck()\ndeck\n\nA♣️; 2♣️; 3♣️; 4♣️; 5♣️; 6♣️; 7♣️; 8♣️; 9♣️; 10♣️; J♣️; Q♣️; K♣️; A♦️; 2♦️; 3♦️; 4♦️; 5♦️; 6♦️; 7♦️; 8♦️; 9♦️; 10♦️; J♦️; Q♦️; K♦️; A♥️; 2♥️; 3♥️; 4♥️; 5♥️; 6♥️; 7♥️; 8♥️; 9♥️; 10♥️; J♥️; Q♥️; K♥️; A♠️; 2♠️; 3♠️; 4♠️; 5♠️; 6♠️; 7♠️; 8♠️; 9♠️; 10♠️; J♠️; Q♠️; K♠️\n\n\nThat should be 52 cards\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\n\n\nWe can check if, e.g. the Ace of Clubs is in the deck\n\nCard(0,1)\n\nA♣️\n\n\n\nCard(0,1) in deck\n\nTrue\n\n\n\nsource\n\n\nDeck.pop\n\n Deck.pop (idx:int=-1)\n\nRemove one card from the deck\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nidx\nint\n-1\nThe index of the card to remove, defaulting to the last one\n\n\n\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))  # K♠️\n\n\nsource\n\n\nDeck.shuffle\n\n Deck.shuffle ()\n\nShuffles the cards in this deck\n\nsource\n\n\nDeck.remove\n\n Deck.remove (card:nbdev_cardtest.card.Card)\n\nRemoves card from the deck or raises exception if it is not there\n\n\n\n\nType\nDetails\n\n\n\n\ncard\nCard\nCard to remove\n\n\n\n\ncard23 = Card(2, 3)\ndeck.remove(card23)\n\nassert card23 not in deck\n\n\n# show_doc(Deck.shuffle)"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "card — a basic playing card",
    "section": "",
    "text": "print(suits)\n\n['♣️', '♦️', '♥️', '♠️']\n\n\nFor instance the suit at index (0)\n\nsuits[0]\n\n'♣️'\n\n\nThese are the ranks\n\nprint(ranks)\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card created by passing in rank from ranks and suit from suits\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nAn index into suits\n\n\nrank\nint\nAn index into ranks\n\n\n\nAn example of creating and displaying a card\n\nc = Card(suit=1, rank=3)\nc\n\n3♦️\n\n\n\n\nComparison operators\nEquality tests on the rank and suit indices\nFor example, here is a test for equality\n\ntest_eq(Card(suit=1, rank=3), Card(suit=1, rank=3))\n\nA test of < and >\n\nassert Card(suit=1, rank=4) < Card(suit=2, rank=3)\nassert not Card(suit=1, rank=3) > Card(suit=2, rank=3)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cardtest",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.\nNow you’re ready to create your documentation home page and README.md file; these are both generated automatically from index.ipynb. Open the Jupyter Notebook home page, then click on index.ipynb to open it.\nWe recommend including a longer description about what your package does, how to install it, and how to use it (with a few examples which import and use your package). Remember, examples can be code cells with real outputs rather than plain markdown text."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cardtest",
    "section": "Install",
    "text": "Install\npip install nbdev_cardtest"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cardtest",
    "section": "How to use",
    "text": "How to use\nThis library provides a Card class you can use to create display and compare playing cards\n\nc = Card(1,3)\nc\n\n3♦️\n\n\n\nsuits\n\n['♣️', '♦️', '♥️', '♠️']\n\n\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']"
  }
]